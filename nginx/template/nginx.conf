events { }

http {
    # Use Docker's internal DNS resolver for service discovery
    resolver 127.0.0.11 valid=10s ipv6=off;

    # Define upstream groups dynamically using $ACTIVE_POOL
    upstream app_primary {
        # Primary service based on ACTIVE_POOL environment variable
        server ${ACTIVE_POOL}:3000 max_fails=1 fail_timeout=2s;

        # Determine backup dynamically
        server ${BACKUP_POOL}:3000 backup;

        zone backend 64k;
    }

    server {
        listen 80;
        server_name localhost;

        # Keep timeouts short to detect failures quickly
        location / {
            proxy_connect_timeout 1s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;

            # Retry if upstream fails
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;

            # Preserve app headers
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://app_primary;
        }
    }
}
